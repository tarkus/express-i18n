// Generated by CoffeeScript 1.7.1
var captalize, chose, options, translate, _;

_ = require('underscore');

options = {
  lang: "en",
  locales: {}
};

captalize = function(str) {
  return (str.split('_').map(function(word) {
    return word[0].toUpperCase() + word.slice(1).toLowerCase();
  })).join(' ');
};

exports.chose = chose = function(lang) {
  return function(name, args) {
    if (args == null) {
      args = {};
    }
    return translate(lang, name, args);
  };
};

translate = function(lang, name, args) {
  var k, part, parts, translation, v, _i, _j, _len, _len1;
  if (args == null) {
    args = {};
  }
  translation = options.locales[lang];
  parts = name.split(".");
  for (_i = 0, _len = parts.length; _i < _len; _i++) {
    part = parts[_i];
    if (part === "") {
      continue;
    }
    if (translation[part] == null) {
      break;
    }
    translation = translation[part];
  }
  if (typeof translation !== "string") {
    if (process.env.NODE_ENV === "production") {
      return "" + (captalize(part));
    } else {
      return "<span class=\"translation_missing\" ref=\"" + lang + "." + name + "\">" + (captalize(part)) + "</span>";
    }
  }
  for (k = _j = 0, _len1 = args.length; _j < _len1; k = ++_j) {
    v = args[k];
    translation = translation.replace(new RegExp("%{" + k + "}", "g"), v);
  }
  return translation;
};

exports.locales = function() {
  return options.locales;
};

exports.connect = function(opts) {
  options = _.extend(options, opts);
  return function(req, res, next) {
    var _base;
    if ((_base = res.locals).lang == null) {
      _base.lang = options.lang;
    }
    res.language = function(lang) {
      return res.locals.t = chose(lang);
    };
    res.language(res.locals.lang);
    return next();
  };
};
